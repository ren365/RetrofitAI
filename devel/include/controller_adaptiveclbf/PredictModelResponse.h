// Generated by gencpp from file controller_adaptiveclbf/PredictModelResponse.msg
// DO NOT EDIT!


#ifndef CONTROLLER_ADAPTIVECLBF_MESSAGE_PREDICTMODELRESPONSE_H
#define CONTROLLER_ADAPTIVECLBF_MESSAGE_PREDICTMODELRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace controller_adaptiveclbf
{
template <class ContainerAllocator>
struct PredictModelResponse_
{
  typedef PredictModelResponse_<ContainerAllocator> Type;

  PredictModelResponse_()
    : y_out()
    , var()
    , result(false)  {
    }
  PredictModelResponse_(const ContainerAllocator& _alloc)
    : y_out(_alloc)
    , var(_alloc)
    , result(false)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _y_out_type;
  _y_out_type y_out;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _var_type;
  _var_type var;

   typedef uint8_t _result_type;
  _result_type result;





  typedef boost::shared_ptr< ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PredictModelResponse_

typedef ::controller_adaptiveclbf::PredictModelResponse_<std::allocator<void> > PredictModelResponse;

typedef boost::shared_ptr< ::controller_adaptiveclbf::PredictModelResponse > PredictModelResponsePtr;
typedef boost::shared_ptr< ::controller_adaptiveclbf::PredictModelResponse const> PredictModelResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator1> & lhs, const ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator2> & rhs)
{
  return lhs.y_out == rhs.y_out &&
    lhs.var == rhs.var &&
    lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator1> & lhs, const ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace controller_adaptiveclbf

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9931d4c297436710e1e1e8d0ba887cc5";
  }

  static const char* value(const ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9931d4c297436710ULL;
  static const uint64_t static_value2 = 0xe1e1e8d0ba887cc5ULL;
};

template<class ContainerAllocator>
struct DataType< ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "controller_adaptiveclbf/PredictModelResponse";
  }

  static const char* value(const ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# result\n"
"float32[] y_out\n"
"float32[] var\n"
"bool result\n"
"\n"
;
  }

  static const char* value(const ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.y_out);
      stream.next(m.var);
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PredictModelResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::controller_adaptiveclbf::PredictModelResponse_<ContainerAllocator>& v)
  {
    s << indent << "y_out[]" << std::endl;
    for (size_t i = 0; i < v.y_out.size(); ++i)
    {
      s << indent << "  y_out[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y_out[i]);
    }
    s << indent << "var[]" << std::endl;
    for (size_t i = 0; i < v.var.size(); ++i)
    {
      s << indent << "  var[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.var[i]);
    }
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROLLER_ADAPTIVECLBF_MESSAGE_PREDICTMODELRESPONSE_H
