//#line 2 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the controller_adaptiveclbf package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __controller_adaptiveclbf__ADAPTIVECLBFCONFIG_H__
#define __controller_adaptiveclbf__ADAPTIVECLBFCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace controller_adaptiveclbf
{
  class adaptiveClbfConfigStatics;

  class adaptiveClbfConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(adaptiveClbfConfig &config, const adaptiveClbfConfig &max, const adaptiveClbfConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const adaptiveClbfConfig &config1, const adaptiveClbfConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, adaptiveClbfConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const adaptiveClbfConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, adaptiveClbfConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const adaptiveClbfConfig &config) const = 0;
      virtual void getValue(const adaptiveClbfConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T adaptiveClbfConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T adaptiveClbfConfig::* field;

      virtual void clamp(adaptiveClbfConfig &config, const adaptiveClbfConfig &max, const adaptiveClbfConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const adaptiveClbfConfig &config1, const adaptiveClbfConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, adaptiveClbfConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const adaptiveClbfConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, adaptiveClbfConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const adaptiveClbfConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const adaptiveClbfConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, adaptiveClbfConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, adaptiveClbfConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<adaptiveClbfConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(adaptiveClbfConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("enable"==(*_i)->name){enable = boost::any_cast<bool>(val);}
      }
    }

    bool enable;

    bool state;
    std::string name;

    class VEHICLE
{
  public:
    VEHICLE()
    {
      state = true;
      name = "Vehicle";
    }

    void setParams(adaptiveClbfConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("vehicle_length"==(*_i)->name){vehicle_length = boost::any_cast<double>(val);}
        if("steering_limit"==(*_i)->name){steering_limit = boost::any_cast<double>(val);}
        if("scale_acceleration"==(*_i)->name){scale_acceleration = boost::any_cast<double>(val);}
        if("acceleration_deadband"==(*_i)->name){acceleration_deadband = boost::any_cast<double>(val);}
        if("acceleration_gain"==(*_i)->name){acceleration_gain = boost::any_cast<double>(val);}
        if("max_accel"==(*_i)->name){max_accel = boost::any_cast<double>(val);}
        if("min_accel"==(*_i)->name){min_accel = boost::any_cast<double>(val);}
        if("rate"==(*_i)->name){rate = boost::any_cast<double>(val);}
      }
    }

    double vehicle_length;
double steering_limit;
double scale_acceleration;
double acceleration_deadband;
double acceleration_gain;
double max_accel;
double min_accel;
double rate;

    bool state;
    std::string name;

    
}vehicle;

class LEARNING
{
  public:
    LEARNING()
    {
      state = true;
      name = "Learning";
    }

    void setParams(adaptiveClbfConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("learning_verbose"==(*_i)->name){learning_verbose = boost::any_cast<bool>(val);}
        if("use_model"==(*_i)->name){use_model = boost::any_cast<bool>(val);}
        if("add_data"==(*_i)->name){add_data = boost::any_cast<bool>(val);}
        if("check_model"==(*_i)->name){check_model = boost::any_cast<bool>(val);}
        if("model_train"==(*_i)->name){model_train = boost::any_cast<bool>(val);}
        if("measurement_noise"==(*_i)->name){measurement_noise = boost::any_cast<double>(val);}
        if("N_data"==(*_i)->name){N_data = boost::any_cast<int>(val);}
        if("N_updates"==(*_i)->name){N_updates = boost::any_cast<int>(val);}
        if("meta_batch_size"==(*_i)->name){meta_batch_size = boost::any_cast<int>(val);}
        if("data_horizon"==(*_i)->name){data_horizon = boost::any_cast<int>(val);}
        if("test_horizon"==(*_i)->name){test_horizon = boost::any_cast<int>(val);}
        if("min_datapoints"==(*_i)->name){min_datapoints = boost::any_cast<int>(val);}
        if("save_data_interval"==(*_i)->name){save_data_interval = boost::any_cast<int>(val);}
        if("learning_rate"==(*_i)->name){learning_rate = boost::any_cast<double>(val);}
      }
    }

    bool learning_verbose;
bool use_model;
bool add_data;
bool check_model;
bool model_train;
double measurement_noise;
int N_data;
int N_updates;
int meta_batch_size;
int data_horizon;
int test_horizon;
int min_datapoints;
int save_data_interval;
double learning_rate;

    bool state;
    std::string name;

    
}learning;

class CONTROL
{
  public:
    CONTROL()
    {
      state = true;
      name = "Control";
    }

    void setParams(adaptiveClbfConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("reverse_velocity_goal"==(*_i)->name){reverse_velocity_goal = boost::any_cast<bool>(val);}
        if("use_qp"==(*_i)->name){use_qp = boost::any_cast<bool>(val);}
        if("desired_vel"==(*_i)->name){desired_vel = boost::any_cast<double>(val);}
        if("verbose"==(*_i)->name){verbose = boost::any_cast<bool>(val);}
        if("kp_z"==(*_i)->name){kp_z = boost::any_cast<double>(val);}
        if("kd_z"==(*_i)->name){kd_z = boost::any_cast<double>(val);}
        if("max_error"==(*_i)->name){max_error = boost::any_cast<double>(val);}
        if("kp_goal"==(*_i)->name){kp_goal = boost::any_cast<double>(val);}
        if("clf_epsilon"==(*_i)->name){clf_epsilon = boost::any_cast<double>(val);}
        if("qp_u_cost"==(*_i)->name){qp_u_cost = boost::any_cast<double>(val);}
        if("qp_u_prev_cost"==(*_i)->name){qp_u_prev_cost = boost::any_cast<double>(val);}
        if("qp_p1_cost"==(*_i)->name){qp_p1_cost = boost::any_cast<double>(val);}
        if("qp_p2_cost"==(*_i)->name){qp_p2_cost = boost::any_cast<double>(val);}
        if("qp_ksig"==(*_i)->name){qp_ksig = boost::any_cast<double>(val);}
        if("qp_max_var"==(*_i)->name){qp_max_var = boost::any_cast<double>(val);}
        if("qp_verbose"==(*_i)->name){qp_verbose = boost::any_cast<bool>(val);}
      }
    }

    bool reverse_velocity_goal;
bool use_qp;
double desired_vel;
bool verbose;
double kp_z;
double kd_z;
double max_error;
double kp_goal;
double clf_epsilon;
double qp_u_cost;
double qp_u_prev_cost;
double qp_p1_cost;
double qp_p2_cost;
double qp_ksig;
double qp_max_var;
bool qp_verbose;

    bool state;
    std::string name;

    
}control;

class BARRIERS
{
  public:
    BARRIERS()
    {
      state = true;
      name = "Barriers";
    }

    void setParams(adaptiveClbfConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("use_barrier_vel"==(*_i)->name){use_barrier_vel = boost::any_cast<bool>(val);}
        if("max_velocity"==(*_i)->name){max_velocity = boost::any_cast<double>(val);}
        if("min_velocity"==(*_i)->name){min_velocity = boost::any_cast<double>(val);}
        if("barrier_vel_gamma"==(*_i)->name){barrier_vel_gamma = boost::any_cast<double>(val);}
        if("use_barrier_pointcloud"==(*_i)->name){use_barrier_pointcloud = boost::any_cast<bool>(val);}
        if("barrier_radius"==(*_i)->name){barrier_radius = boost::any_cast<double>(val);}
        if("barrier_radius_velocity_scale"==(*_i)->name){barrier_radius_velocity_scale = boost::any_cast<double>(val);}
        if("barrier_pc_gamma_p"==(*_i)->name){barrier_pc_gamma_p = boost::any_cast<double>(val);}
        if("barrier_pc_gamma"==(*_i)->name){barrier_pc_gamma = boost::any_cast<double>(val);}
        if("barrier_max_distance"==(*_i)->name){barrier_max_distance = boost::any_cast<double>(val);}
        if("barrier_resolution"==(*_i)->name){barrier_resolution = boost::any_cast<double>(val);}
      }
    }

    bool use_barrier_vel;
double max_velocity;
double min_velocity;
double barrier_vel_gamma;
bool use_barrier_pointcloud;
double barrier_radius;
double barrier_radius_velocity_scale;
double barrier_pc_gamma_p;
double barrier_pc_gamma;
double barrier_max_distance;
double barrier_resolution;

    bool state;
    std::string name;

    
}barriers;

}groups;



//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool enable;
//#line 14 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double vehicle_length;
//#line 15 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double steering_limit;
//#line 16 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double scale_acceleration;
//#line 17 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double acceleration_deadband;
//#line 18 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double acceleration_gain;
//#line 19 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double max_accel;
//#line 20 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double min_accel;
//#line 21 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double rate;
//#line 24 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      bool learning_verbose;
//#line 25 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      bool use_model;
//#line 26 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      bool add_data;
//#line 27 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      bool check_model;
//#line 28 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      bool model_train;
//#line 29 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double measurement_noise;
//#line 30 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      int N_data;
//#line 31 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      int N_updates;
//#line 32 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      int meta_batch_size;
//#line 33 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      int data_horizon;
//#line 34 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      int test_horizon;
//#line 35 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      int min_datapoints;
//#line 36 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      int save_data_interval;
//#line 37 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double learning_rate;
//#line 40 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      bool reverse_velocity_goal;
//#line 41 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      bool use_qp;
//#line 42 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double desired_vel;
//#line 43 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      bool verbose;
//#line 44 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double kp_z;
//#line 45 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double kd_z;
//#line 46 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double max_error;
//#line 47 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double kp_goal;
//#line 48 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double clf_epsilon;
//#line 49 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double qp_u_cost;
//#line 50 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double qp_u_prev_cost;
//#line 51 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double qp_p1_cost;
//#line 52 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double qp_p2_cost;
//#line 53 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double qp_ksig;
//#line 54 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double qp_max_var;
//#line 55 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      bool qp_verbose;
//#line 58 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      bool use_barrier_vel;
//#line 59 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double max_velocity;
//#line 60 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double min_velocity;
//#line 61 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double barrier_vel_gamma;
//#line 62 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      bool use_barrier_pointcloud;
//#line 63 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double barrier_radius;
//#line 64 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double barrier_radius_velocity_scale;
//#line 65 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double barrier_pc_gamma_p;
//#line 66 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double barrier_pc_gamma;
//#line 67 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double barrier_max_distance;
//#line 68 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      double barrier_resolution;
//#line 228 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("adaptiveClbfConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const adaptiveClbfConfig &__max__ = __getMax__();
      const adaptiveClbfConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const adaptiveClbfConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const adaptiveClbfConfig &__getDefault__();
    static const adaptiveClbfConfig &__getMax__();
    static const adaptiveClbfConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const adaptiveClbfConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void adaptiveClbfConfig::ParamDescription<std::string>::clamp(adaptiveClbfConfig &config, const adaptiveClbfConfig &max, const adaptiveClbfConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class adaptiveClbfConfigStatics
  {
    friend class adaptiveClbfConfig;

    adaptiveClbfConfigStatics()
    {
adaptiveClbfConfig::GroupDescription<adaptiveClbfConfig::DEFAULT, adaptiveClbfConfig> Default("Default", "", 0, 0, true, &adaptiveClbfConfig::groups);
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.enable = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.enable = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.enable = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("enable", "bool", 0, "Enable node operation.", "", &adaptiveClbfConfig::enable)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("enable", "bool", 0, "Enable node operation.", "", &adaptiveClbfConfig::enable)));
adaptiveClbfConfig::GroupDescription<adaptiveClbfConfig::DEFAULT::VEHICLE, adaptiveClbfConfig::DEFAULT> Vehicle("Vehicle", "", 0, 1, true, &adaptiveClbfConfig::DEFAULT::vehicle);
//#line 14 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.vehicle_length = 0.01;
//#line 14 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.vehicle_length = 5.0;
//#line 14 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.vehicle_length = 0.4;
//#line 14 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Vehicle.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("vehicle_length", "double", 0, "Vehicle Length (m)", "", &adaptiveClbfConfig::vehicle_length)));
//#line 14 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("vehicle_length", "double", 0, "Vehicle Length (m)", "", &adaptiveClbfConfig::vehicle_length)));
//#line 15 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.steering_limit = 0.0;
//#line 15 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.steering_limit = 2.0;
//#line 15 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.steering_limit = 0.5;
//#line 15 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Vehicle.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("steering_limit", "double", 0, "Steering Limit (?)", "", &adaptiveClbfConfig::steering_limit)));
//#line 15 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("steering_limit", "double", 0, "Steering Limit (?)", "", &adaptiveClbfConfig::steering_limit)));
//#line 16 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.scale_acceleration = 0.0;
//#line 16 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.scale_acceleration = 100.0;
//#line 16 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.scale_acceleration = 0.0;
//#line 16 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Vehicle.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("scale_acceleration", "double", 0, "Desired velocity gain times output acceleration.", "", &adaptiveClbfConfig::scale_acceleration)));
//#line 16 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("scale_acceleration", "double", 0, "Desired velocity gain times output acceleration.", "", &adaptiveClbfConfig::scale_acceleration)));
//#line 17 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.acceleration_deadband = 0.0;
//#line 17 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.acceleration_deadband = 100.0;
//#line 17 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.acceleration_deadband = 3.0;
//#line 17 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Vehicle.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("acceleration_deadband", "double", 0, "Current control deadband.", "", &adaptiveClbfConfig::acceleration_deadband)));
//#line 17 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("acceleration_deadband", "double", 0, "Current control deadband.", "", &adaptiveClbfConfig::acceleration_deadband)));
//#line 18 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.acceleration_gain = 0.0;
//#line 18 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.acceleration_gain = 100.0;
//#line 18 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.acceleration_gain = 8.0;
//#line 18 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Vehicle.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("acceleration_gain", "double", 0, "Desired acceleration gain to current.", "", &adaptiveClbfConfig::acceleration_gain)));
//#line 18 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("acceleration_gain", "double", 0, "Desired acceleration gain to current.", "", &adaptiveClbfConfig::acceleration_gain)));
//#line 19 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.max_accel = -50.0;
//#line 19 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.max_accel = 50.0;
//#line 19 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.max_accel = 4.0;
//#line 19 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Vehicle.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("max_accel", "double", 0, "Max Acceleration (N)", "", &adaptiveClbfConfig::max_accel)));
//#line 19 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("max_accel", "double", 0, "Max Acceleration (N)", "", &adaptiveClbfConfig::max_accel)));
//#line 20 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.min_accel = -50.0;
//#line 20 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.min_accel = 50.0;
//#line 20 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.min_accel = -4.0;
//#line 20 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Vehicle.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("min_accel", "double", 0, "Min Acceleration (N)", "", &adaptiveClbfConfig::min_accel)));
//#line 20 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("min_accel", "double", 0, "Min Acceleration (N)", "", &adaptiveClbfConfig::min_accel)));
//#line 21 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.rate = 0.1;
//#line 21 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.rate = 100.0;
//#line 21 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.rate = 50.0;
//#line 21 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Vehicle.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("rate", "double", 0, "Controller Rate (Hz)", "", &adaptiveClbfConfig::rate)));
//#line 21 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("rate", "double", 0, "Controller Rate (Hz)", "", &adaptiveClbfConfig::rate)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Vehicle.convertParams();
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(adaptiveClbfConfig::AbstractGroupDescriptionConstPtr(new adaptiveClbfConfig::GroupDescription<adaptiveClbfConfig::DEFAULT::VEHICLE, adaptiveClbfConfig::DEFAULT>(Vehicle)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(adaptiveClbfConfig::AbstractGroupDescriptionConstPtr(new adaptiveClbfConfig::GroupDescription<adaptiveClbfConfig::DEFAULT::VEHICLE, adaptiveClbfConfig::DEFAULT>(Vehicle)));
adaptiveClbfConfig::GroupDescription<adaptiveClbfConfig::DEFAULT::LEARNING, adaptiveClbfConfig::DEFAULT> Learning("Learning", "", 0, 2, true, &adaptiveClbfConfig::DEFAULT::learning);
//#line 24 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.learning_verbose = 0;
//#line 24 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.learning_verbose = 1;
//#line 24 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.learning_verbose = 0;
//#line 24 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Learning.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("learning_verbose", "bool", 0, "Enable Learning verbose mode", "", &adaptiveClbfConfig::learning_verbose)));
//#line 24 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("learning_verbose", "bool", 0, "Enable Learning verbose mode", "", &adaptiveClbfConfig::learning_verbose)));
//#line 25 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.use_model = 0;
//#line 25 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.use_model = 1;
//#line 25 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.use_model = 0;
//#line 25 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Learning.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("use_model", "bool", 0, "Use learned model in adaptive controller", "", &adaptiveClbfConfig::use_model)));
//#line 25 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("use_model", "bool", 0, "Use learned model in adaptive controller", "", &adaptiveClbfConfig::use_model)));
//#line 26 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.add_data = 0;
//#line 26 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.add_data = 1;
//#line 26 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.add_data = 1;
//#line 26 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Learning.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("add_data", "bool", 0, "Whether or not to record data for training", "", &adaptiveClbfConfig::add_data)));
//#line 26 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("add_data", "bool", 0, "Whether or not to record data for training", "", &adaptiveClbfConfig::add_data)));
//#line 27 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.check_model = 0;
//#line 27 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.check_model = 1;
//#line 27 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.check_model = 1;
//#line 27 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Learning.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("check_model", "bool", 0, "Compute training loss online", "", &adaptiveClbfConfig::check_model)));
//#line 27 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("check_model", "bool", 0, "Compute training loss online", "", &adaptiveClbfConfig::check_model)));
//#line 28 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.model_train = 0;
//#line 28 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.model_train = 1;
//#line 28 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.model_train = 1;
//#line 28 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Learning.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("model_train", "bool", 0, "Train model in adaptive controller", "", &adaptiveClbfConfig::model_train)));
//#line 28 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("model_train", "bool", 0, "Train model in adaptive controller", "", &adaptiveClbfConfig::model_train)));
//#line 29 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.measurement_noise = 0.0;
//#line 29 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.measurement_noise = 100.0;
//#line 29 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.measurement_noise = 40.0;
//#line 29 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Learning.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("measurement_noise", "double", 0, "Prior on noise for model, how much to trust model", "", &adaptiveClbfConfig::measurement_noise)));
//#line 29 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("measurement_noise", "double", 0, "Prior on noise for model, how much to trust model", "", &adaptiveClbfConfig::measurement_noise)));
//#line 30 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.N_data = 1;
//#line 30 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.N_data = 100000;
//#line 30 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.N_data = 50000;
//#line 30 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Learning.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<int>("N_data", "int", 0, "Number of datapoints to save", "", &adaptiveClbfConfig::N_data)));
//#line 30 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<int>("N_data", "int", 0, "Number of datapoints to save", "", &adaptiveClbfConfig::N_data)));
//#line 31 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.N_updates = 1;
//#line 31 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.N_updates = 50000;
//#line 31 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.N_updates = 50;
//#line 31 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Learning.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<int>("N_updates", "int", 0, "Number of training updates", "", &adaptiveClbfConfig::N_updates)));
//#line 31 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<int>("N_updates", "int", 0, "Number of training updates", "", &adaptiveClbfConfig::N_updates)));
//#line 32 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.meta_batch_size = 1;
//#line 32 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.meta_batch_size = 1000;
//#line 32 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.meta_batch_size = 50;
//#line 32 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Learning.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<int>("meta_batch_size", "int", 0, "Meta-batch size", "", &adaptiveClbfConfig::meta_batch_size)));
//#line 32 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<int>("meta_batch_size", "int", 0, "Meta-batch size", "", &adaptiveClbfConfig::meta_batch_size)));
//#line 33 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.data_horizon = 1;
//#line 33 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.data_horizon = 1000;
//#line 33 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.data_horizon = 20;
//#line 33 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Learning.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<int>("data_horizon", "int", 0, "Number of context data points", "", &adaptiveClbfConfig::data_horizon)));
//#line 33 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<int>("data_horizon", "int", 0, "Number of context data points", "", &adaptiveClbfConfig::data_horizon)));
//#line 34 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.test_horizon = 1;
//#line 34 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.test_horizon = 1000;
//#line 34 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.test_horizon = 30;
//#line 34 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Learning.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<int>("test_horizon", "int", 0, "Number of test data points", "", &adaptiveClbfConfig::test_horizon)));
//#line 34 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<int>("test_horizon", "int", 0, "Number of test data points", "", &adaptiveClbfConfig::test_horizon)));
//#line 35 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.min_datapoints = 1;
//#line 35 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.min_datapoints = 100000;
//#line 35 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.min_datapoints = 500;
//#line 35 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Learning.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<int>("min_datapoints", "int", 0, "Minimum number of data points before training", "", &adaptiveClbfConfig::min_datapoints)));
//#line 35 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<int>("min_datapoints", "int", 0, "Minimum number of data points before training", "", &adaptiveClbfConfig::min_datapoints)));
//#line 36 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.save_data_interval = 1;
//#line 36 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.save_data_interval = 10000000;
//#line 36 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.save_data_interval = 10000;
//#line 36 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Learning.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<int>("save_data_interval", "int", 0, "Interval at which to save data", "", &adaptiveClbfConfig::save_data_interval)));
//#line 36 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<int>("save_data_interval", "int", 0, "Interval at which to save data", "", &adaptiveClbfConfig::save_data_interval)));
//#line 37 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.learning_rate = 0.0;
//#line 37 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.learning_rate = 10.0;
//#line 37 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.learning_rate = 0.001;
//#line 37 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Learning.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("learning_rate", "double", 0, "Learning rate", "", &adaptiveClbfConfig::learning_rate)));
//#line 37 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("learning_rate", "double", 0, "Learning rate", "", &adaptiveClbfConfig::learning_rate)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Learning.convertParams();
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(adaptiveClbfConfig::AbstractGroupDescriptionConstPtr(new adaptiveClbfConfig::GroupDescription<adaptiveClbfConfig::DEFAULT::LEARNING, adaptiveClbfConfig::DEFAULT>(Learning)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(adaptiveClbfConfig::AbstractGroupDescriptionConstPtr(new adaptiveClbfConfig::GroupDescription<adaptiveClbfConfig::DEFAULT::LEARNING, adaptiveClbfConfig::DEFAULT>(Learning)));
adaptiveClbfConfig::GroupDescription<adaptiveClbfConfig::DEFAULT::CONTROL, adaptiveClbfConfig::DEFAULT> Control("Control", "", 0, 3, true, &adaptiveClbfConfig::DEFAULT::control);
//#line 40 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.reverse_velocity_goal = 0;
//#line 40 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.reverse_velocity_goal = 1;
//#line 40 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.reverse_velocity_goal = 0;
//#line 40 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Control.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("reverse_velocity_goal", "bool", 0, "Reverse desired velocity if vehicle stops.", "", &adaptiveClbfConfig::reverse_velocity_goal)));
//#line 40 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("reverse_velocity_goal", "bool", 0, "Reverse desired velocity if vehicle stops.", "", &adaptiveClbfConfig::reverse_velocity_goal)));
//#line 41 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.use_qp = 0;
//#line 41 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.use_qp = 1;
//#line 41 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.use_qp = 1;
//#line 41 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Control.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("use_qp", "bool", 0, "Use qp to optimize for controls", "", &adaptiveClbfConfig::use_qp)));
//#line 41 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("use_qp", "bool", 0, "Use qp to optimize for controls", "", &adaptiveClbfConfig::use_qp)));
//#line 42 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.desired_vel = -100.0;
//#line 42 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.desired_vel = 100.0;
//#line 42 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.desired_vel = 0.0;
//#line 42 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Control.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("desired_vel", "double", 0, "Desired velocity at goal", "", &adaptiveClbfConfig::desired_vel)));
//#line 42 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("desired_vel", "double", 0, "Desired velocity at goal", "", &adaptiveClbfConfig::desired_vel)));
//#line 43 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.verbose = 0;
//#line 43 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.verbose = 1;
//#line 43 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.verbose = 0;
//#line 43 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Control.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("verbose", "bool", 0, "Enable Controller Verbose mode", "", &adaptiveClbfConfig::verbose)));
//#line 43 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("verbose", "bool", 0, "Enable Controller Verbose mode", "", &adaptiveClbfConfig::verbose)));
//#line 44 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.kp_z = 0.0;
//#line 44 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.kp_z = 100.0;
//#line 44 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.kp_z = 1.0;
//#line 44 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Control.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("kp_z", "double", 0, "Position Gain", "", &adaptiveClbfConfig::kp_z)));
//#line 44 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("kp_z", "double", 0, "Position Gain", "", &adaptiveClbfConfig::kp_z)));
//#line 45 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.kd_z = 0.0;
//#line 45 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.kd_z = 100.0;
//#line 45 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.kd_z = 1.0;
//#line 45 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Control.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("kd_z", "double", 0, "Velocity Gain", "", &adaptiveClbfConfig::kd_z)));
//#line 45 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("kd_z", "double", 0, "Velocity Gain", "", &adaptiveClbfConfig::kd_z)));
//#line 46 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.max_error = 0.0;
//#line 46 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.max_error = 1000.0;
//#line 46 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.max_error = 10.0;
//#line 46 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Control.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("max_error", "double", 0, "clip pd error", "", &adaptiveClbfConfig::max_error)));
//#line 46 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("max_error", "double", 0, "clip pd error", "", &adaptiveClbfConfig::max_error)));
//#line 47 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.kp_goal = -1.0;
//#line 47 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.kp_goal = 10.0;
//#line 47 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.kp_goal = -1.0;
//#line 47 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Control.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("kp_goal", "double", 0, "Set desired velocity proportional to distance to goal (<0 to disable)", "", &adaptiveClbfConfig::kp_goal)));
//#line 47 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("kp_goal", "double", 0, "Set desired velocity proportional to distance to goal (<0 to disable)", "", &adaptiveClbfConfig::kp_goal)));
//#line 48 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.clf_epsilon = 0.001;
//#line 48 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.clf_epsilon = 10000.0;
//#line 48 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.clf_epsilon = 100.0;
//#line 48 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Control.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("clf_epsilon", "double", 0, "CLF Epsilon Convergence Factor", "", &adaptiveClbfConfig::clf_epsilon)));
//#line 48 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("clf_epsilon", "double", 0, "CLF Epsilon Convergence Factor", "", &adaptiveClbfConfig::clf_epsilon)));
//#line 49 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.qp_u_cost = 0.0;
//#line 49 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.qp_u_cost = 10000000000.0;
//#line 49 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.qp_u_cost = 100.0;
//#line 49 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Control.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("qp_u_cost", "double", 0, "QP Controls Cost", "", &adaptiveClbfConfig::qp_u_cost)));
//#line 49 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("qp_u_cost", "double", 0, "QP Controls Cost", "", &adaptiveClbfConfig::qp_u_cost)));
//#line 50 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.qp_u_prev_cost = 0.0;
//#line 50 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.qp_u_prev_cost = 10000000000.0;
//#line 50 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.qp_u_prev_cost = 0.0;
//#line 50 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Control.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("qp_u_prev_cost", "double", 0, "QP Controls Smoothing Cost", "", &adaptiveClbfConfig::qp_u_prev_cost)));
//#line 50 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("qp_u_prev_cost", "double", 0, "QP Controls Smoothing Cost", "", &adaptiveClbfConfig::qp_u_prev_cost)));
//#line 51 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.qp_p1_cost = 0.0;
//#line 51 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.qp_p1_cost = 1e+12;
//#line 51 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.qp_p1_cost = 1.0;
//#line 51 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Control.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("qp_p1_cost", "double", 0, "QP Lyapunov Slack Cost", "", &adaptiveClbfConfig::qp_p1_cost)));
//#line 51 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("qp_p1_cost", "double", 0, "QP Lyapunov Slack Cost", "", &adaptiveClbfConfig::qp_p1_cost)));
//#line 52 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.qp_p2_cost = 0.0;
//#line 52 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.qp_p2_cost = 1e+12;
//#line 52 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.qp_p2_cost = 1e+12;
//#line 52 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Control.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("qp_p2_cost", "double", 0, "QP Barrier Slack Cost", "", &adaptiveClbfConfig::qp_p2_cost)));
//#line 52 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("qp_p2_cost", "double", 0, "QP Barrier Slack Cost", "", &adaptiveClbfConfig::qp_p2_cost)));
//#line 53 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.qp_ksig = 0.0;
//#line 53 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.qp_ksig = 10000000000.0;
//#line 53 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.qp_ksig = 1.0;
//#line 53 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Control.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("qp_ksig", "double", 0, "QP k_sigma Safety factor", "", &adaptiveClbfConfig::qp_ksig)));
//#line 53 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("qp_ksig", "double", 0, "QP k_sigma Safety factor", "", &adaptiveClbfConfig::qp_ksig)));
//#line 54 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.qp_max_var = 0.0;
//#line 54 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.qp_max_var = 100.0;
//#line 54 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.qp_max_var = 1.0;
//#line 54 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Control.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("qp_max_var", "double", 0, "QP Max Variance for sigDelta", "", &adaptiveClbfConfig::qp_max_var)));
//#line 54 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("qp_max_var", "double", 0, "QP Max Variance for sigDelta", "", &adaptiveClbfConfig::qp_max_var)));
//#line 55 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.qp_verbose = 0;
//#line 55 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.qp_verbose = 1;
//#line 55 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.qp_verbose = 0;
//#line 55 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Control.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("qp_verbose", "bool", 0, "Enable QP Verbose mode", "", &adaptiveClbfConfig::qp_verbose)));
//#line 55 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("qp_verbose", "bool", 0, "Enable QP Verbose mode", "", &adaptiveClbfConfig::qp_verbose)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Control.convertParams();
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(adaptiveClbfConfig::AbstractGroupDescriptionConstPtr(new adaptiveClbfConfig::GroupDescription<adaptiveClbfConfig::DEFAULT::CONTROL, adaptiveClbfConfig::DEFAULT>(Control)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(adaptiveClbfConfig::AbstractGroupDescriptionConstPtr(new adaptiveClbfConfig::GroupDescription<adaptiveClbfConfig::DEFAULT::CONTROL, adaptiveClbfConfig::DEFAULT>(Control)));
adaptiveClbfConfig::GroupDescription<adaptiveClbfConfig::DEFAULT::BARRIERS, adaptiveClbfConfig::DEFAULT> Barriers("Barriers", "", 0, 4, true, &adaptiveClbfConfig::DEFAULT::barriers);
//#line 58 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.use_barrier_vel = 0;
//#line 58 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.use_barrier_vel = 1;
//#line 58 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.use_barrier_vel = 1;
//#line 58 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Barriers.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("use_barrier_vel", "bool", 0, "CBF for Velocity Enable/Disable", "", &adaptiveClbfConfig::use_barrier_vel)));
//#line 58 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("use_barrier_vel", "bool", 0, "CBF for Velocity Enable/Disable", "", &adaptiveClbfConfig::use_barrier_vel)));
//#line 59 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.max_velocity = -100.0;
//#line 59 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.max_velocity = 100.0;
//#line 59 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.max_velocity = 5.0;
//#line 59 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Barriers.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("max_velocity", "double", 0, "CBF Barrier for Max Velocity", "", &adaptiveClbfConfig::max_velocity)));
//#line 59 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("max_velocity", "double", 0, "CBF Barrier for Max Velocity", "", &adaptiveClbfConfig::max_velocity)));
//#line 60 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.min_velocity = -100.0;
//#line 60 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.min_velocity = 100.0;
//#line 60 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.min_velocity = 0.0;
//#line 60 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Barriers.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("min_velocity", "double", 0, "CBF Barrier for Min Velocity", "", &adaptiveClbfConfig::min_velocity)));
//#line 60 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("min_velocity", "double", 0, "CBF Barrier for Min Velocity", "", &adaptiveClbfConfig::min_velocity)));
//#line 61 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.barrier_vel_gamma = 0.0;
//#line 61 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.barrier_vel_gamma = 10000.0;
//#line 61 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.barrier_vel_gamma = 100.0;
//#line 61 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Barriers.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("barrier_vel_gamma", "double", 0, "CBF Barrier gamma for Velocity", "", &adaptiveClbfConfig::barrier_vel_gamma)));
//#line 61 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("barrier_vel_gamma", "double", 0, "CBF Barrier gamma for Velocity", "", &adaptiveClbfConfig::barrier_vel_gamma)));
//#line 62 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.use_barrier_pointcloud = 0;
//#line 62 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.use_barrier_pointcloud = 1;
//#line 62 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.use_barrier_pointcloud = 0;
//#line 62 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Barriers.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("use_barrier_pointcloud", "bool", 0, "CBF for Points on pointcloud Enable/Disable", "", &adaptiveClbfConfig::use_barrier_pointcloud)));
//#line 62 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<bool>("use_barrier_pointcloud", "bool", 0, "CBF for Points on pointcloud Enable/Disable", "", &adaptiveClbfConfig::use_barrier_pointcloud)));
//#line 63 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.barrier_radius = -10.0;
//#line 63 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.barrier_radius = 100.0;
//#line 63 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.barrier_radius = 0.4;
//#line 63 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Barriers.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("barrier_radius", "double", 0, "CBF Barrier for pointcloud, min radius", "", &adaptiveClbfConfig::barrier_radius)));
//#line 63 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("barrier_radius", "double", 0, "CBF Barrier for pointcloud, min radius", "", &adaptiveClbfConfig::barrier_radius)));
//#line 64 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.barrier_radius_velocity_scale = -10.0;
//#line 64 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.barrier_radius_velocity_scale = 100.0;
//#line 64 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.barrier_radius_velocity_scale = 0.2;
//#line 64 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Barriers.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("barrier_radius_velocity_scale", "double", 0, "CBF Barrier for pointcloud, scale radius by velocity", "", &adaptiveClbfConfig::barrier_radius_velocity_scale)));
//#line 64 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("barrier_radius_velocity_scale", "double", 0, "CBF Barrier for pointcloud, scale radius by velocity", "", &adaptiveClbfConfig::barrier_radius_velocity_scale)));
//#line 65 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.barrier_pc_gamma_p = 0.0;
//#line 65 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.barrier_pc_gamma_p = 10000.0;
//#line 65 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.barrier_pc_gamma_p = 1.0;
//#line 65 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Barriers.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("barrier_pc_gamma_p", "double", 0, "CBF Barrier for pointcloud, gamma_p", "", &adaptiveClbfConfig::barrier_pc_gamma_p)));
//#line 65 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("barrier_pc_gamma_p", "double", 0, "CBF Barrier for pointcloud, gamma_p", "", &adaptiveClbfConfig::barrier_pc_gamma_p)));
//#line 66 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.barrier_pc_gamma = 0.0;
//#line 66 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.barrier_pc_gamma = 10000.0;
//#line 66 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.barrier_pc_gamma = 10.0;
//#line 66 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Barriers.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("barrier_pc_gamma", "double", 0, "CBF Barrier for pointcloud, gamma", "", &adaptiveClbfConfig::barrier_pc_gamma)));
//#line 66 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("barrier_pc_gamma", "double", 0, "CBF Barrier for pointcloud, gamma", "", &adaptiveClbfConfig::barrier_pc_gamma)));
//#line 67 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.barrier_max_distance = 0.0;
//#line 67 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.barrier_max_distance = 100.0;
//#line 67 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.barrier_max_distance = 3.0;
//#line 67 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Barriers.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("barrier_max_distance", "double", 0, "CBF Barrier max distance", "", &adaptiveClbfConfig::barrier_max_distance)));
//#line 67 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("barrier_max_distance", "double", 0, "CBF Barrier max distance", "", &adaptiveClbfConfig::barrier_max_distance)));
//#line 68 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __min__.barrier_resolution = 0.0;
//#line 68 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __max__.barrier_resolution = 10.0;
//#line 68 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __default__.barrier_resolution = 0.1;
//#line 68 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      Barriers.abstract_parameters.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("barrier_resolution", "double", 0, "CBF Barrier resolution", "", &adaptiveClbfConfig::barrier_resolution)));
//#line 68 "/home/zehao/Desktop/ros_new/src/balsa/cfg/adaptiveClbf.cfg"
      __param_descriptions__.push_back(adaptiveClbfConfig::AbstractParamDescriptionConstPtr(new adaptiveClbfConfig::ParamDescription<double>("barrier_resolution", "double", 0, "CBF Barrier resolution", "", &adaptiveClbfConfig::barrier_resolution)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Barriers.convertParams();
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(adaptiveClbfConfig::AbstractGroupDescriptionConstPtr(new adaptiveClbfConfig::GroupDescription<adaptiveClbfConfig::DEFAULT::BARRIERS, adaptiveClbfConfig::DEFAULT>(Barriers)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(adaptiveClbfConfig::AbstractGroupDescriptionConstPtr(new adaptiveClbfConfig::GroupDescription<adaptiveClbfConfig::DEFAULT::BARRIERS, adaptiveClbfConfig::DEFAULT>(Barriers)));
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(adaptiveClbfConfig::AbstractGroupDescriptionConstPtr(new adaptiveClbfConfig::GroupDescription<adaptiveClbfConfig::DEFAULT, adaptiveClbfConfig>(Default)));
//#line 366 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<adaptiveClbfConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<adaptiveClbfConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<adaptiveClbfConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    adaptiveClbfConfig __max__;
    adaptiveClbfConfig __min__;
    adaptiveClbfConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const adaptiveClbfConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static adaptiveClbfConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &adaptiveClbfConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const adaptiveClbfConfig &adaptiveClbfConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const adaptiveClbfConfig &adaptiveClbfConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const adaptiveClbfConfig &adaptiveClbfConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<adaptiveClbfConfig::AbstractParamDescriptionConstPtr> &adaptiveClbfConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<adaptiveClbfConfig::AbstractGroupDescriptionConstPtr> &adaptiveClbfConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const adaptiveClbfConfigStatics *adaptiveClbfConfig::__get_statics__()
  {
    const static adaptiveClbfConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = adaptiveClbfConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __ADAPTIVECLBFRECONFIGURATOR_H__
