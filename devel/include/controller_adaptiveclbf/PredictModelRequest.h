// Generated by gencpp from file controller_adaptiveclbf/PredictModelRequest.msg
// DO NOT EDIT!


#ifndef CONTROLLER_ADAPTIVECLBF_MESSAGE_PREDICTMODELREQUEST_H
#define CONTROLLER_ADAPTIVECLBF_MESSAGE_PREDICTMODELREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace controller_adaptiveclbf
{
template <class ContainerAllocator>
struct PredictModelRequest_
{
  typedef PredictModelRequest_<ContainerAllocator> Type;

  PredictModelRequest_()
    : x()
    , obs()  {
    }
  PredictModelRequest_(const ContainerAllocator& _alloc)
    : x(_alloc)
    , obs(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _x_type;
  _x_type x;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _obs_type;
  _obs_type obs;





  typedef boost::shared_ptr< ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PredictModelRequest_

typedef ::controller_adaptiveclbf::PredictModelRequest_<std::allocator<void> > PredictModelRequest;

typedef boost::shared_ptr< ::controller_adaptiveclbf::PredictModelRequest > PredictModelRequestPtr;
typedef boost::shared_ptr< ::controller_adaptiveclbf::PredictModelRequest const> PredictModelRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator1> & lhs, const ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.obs == rhs.obs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator1> & lhs, const ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace controller_adaptiveclbf

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "de9dbafe8d69d65144da50f94f8f429b";
  }

  static const char* value(const ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xde9dbafe8d69d651ULL;
  static const uint64_t static_value2 = 0x44da50f94f8f429bULL;
};

template<class ContainerAllocator>
struct DataType< ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "controller_adaptiveclbf/PredictModelRequest";
  }

  static const char* value(const ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] x\n"
"float32[] obs\n"
;
  }

  static const char* value(const ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.obs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PredictModelRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::controller_adaptiveclbf::PredictModelRequest_<ContainerAllocator>& v)
  {
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "obs[]" << std::endl;
    for (size_t i = 0; i < v.obs.size(); ++i)
    {
      s << indent << "  obs[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.obs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROLLER_ADAPTIVECLBF_MESSAGE_PREDICTMODELREQUEST_H
